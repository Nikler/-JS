// Условыне и логические операторы

// Условный оператор 'if'

var age = 18;

if (age === 18 ) {
	alerrt('ok');
} else if (age === 21) {
	alert('ok ok');
} else {
	alert('error');
}

// Тернарный оператор '?'

(age === 18) ? alert('ok') :
			   alert('error')

// Запись конструкции if ,которая выше ,через тернарный оператор

(age === 18) ? alert('ok') :
			   (age === 21) ? alert('ok ok') :
			   alert('error')


// Логические операторы

|| // или
&& // и
! // не

(age >= 18 && age <= 50) ? alert('ok') : alert('error')
						
// Числа

var numb = 234;

numb.toFexed(2); // приводит число к числу с плавающей точкой. 
//В скобках указываем кол-во цифр после запятой

numb.toExponential(); // Приводит число к экспоненциальному виду - 2.34e + 2

numb.toPresision(3); // Округляет число 

numb,toString(); // Приводит число к строке

Math.sqrt(81); // Вычисление корня

Math.pow(5, 4); // Возведение числа 5 в степень 4

Math.floor(numb); // Округляет вниз
Math.ceil(numb); // Округляет вверх
Math.round(numb); // Округляет по математическим правилам

Math.PI; // Выводит число Pi

var a = 0/0; // - NaN (Not a number) 
// Возвращается при ошибочных математических операциях
// NaN не равно ничему и даже самому себе

isNaN(numb) // возвращает true ,если значение NaN

a = 1/0 // - Infinity

a = -1/0 // - -Infinity


// Строки

var str = 'string';

	str = "\"string\" is data type"; // \ - экранирование кавычек

	var longstr = "длинная\n строка получилась" // - \n - перенос строки
		longstr = "длинная\t строка получилась" // - \t - табуляция

str.length // Возвращает число - кол-во символов в строке

str2 = 'hello' + " world"; // + - конкатенцаия строк

var str3 = str2.concat(str); // конкатенирует строку str2 со строкой str

str.charAt(0) // Вернет символ по его индексу .Здесь вернет первый символ

str.charCodeAt(1); // Возвращает код символа по его индексу

str.substring(5, 7) // Возвращает всю подстроку начиная с 5 символа по 7

str.slice(10) // Обрезает текст начиная с символа по идексу 
// Если аргумент с минусом ,то обрезает с конца

str.substr(4,7) // Вырезает начиная с 4 символа 7 символов. Второе значение указывает на кол-во символов

str.split(' ') // Преобразует строку в массив. В качестве аргумента передается разделитель. Обычно это пробел

str.replace('string', 'number') // Заменяет 'string' в строке на 'number'

str.indexOf('a') // Выводит индекс по символу. Обратный метод charAt

str.toUpperCase() // Возводит все символы в верхний регистр

str.toLowerCase() // Возводит все символы в нижний регистр

// Boolean ,null ,undefined________________________________________________________________

// Boolean

var a = true;
var b = false;

if (a) {
	alert('Hello');
}


// false
Boolean(NaN)
Boolean("")
Boolean(0)
Boolean(undefined)
Boolean(null)

//true
// все остальное

// undefined & null

// undefined == null - false

//undefined - значение не присвоено ,не существует. Обычно возвращается браузером

//null - значение пустоты. Обычно задается программистом


// Преобразования типов данных_________________________________________________________

String(arg); // Преобразование аргумента в строку
Number(arg); // Преобразование аргумента в число
Boolean(arg); // Преобразование аргумента в булевский тип


var a = 5 + '1', // = 51. Если к числу добавляется строка ,в итоге получается строка
	a = 2345 + '', // Быстрое преобразование числа в строку
	a = +'23456', // Быстрое преобразование строки в число
	a = !!'24', // Быстрое преобразование строки к булевскому типу
	a = +'', // Получим 0
	a = +true, // Получим 1
	a = +false // Получим 0

var b = 77;
var s = '77 px';

b.toString(); // Преобразование в строку
parseInt(s); // преобразование в число. Любой текст после цифр в строке отбрасывается ,включая цифры ,идущие за текстом
parseFloat(s) // Парсит число с плавающей точкой

// Объекты________________________________________________________________________________

// 2 способа создания объекта

var a = new Object(); // 1 ,Bad practices
var b = {
	key1 : 'string',
	key2 : function() {}
}; // 2 ,best pratices

alert(b.key1); // - 'string'

// В объекты можно вкладывать другие объекты

// чтобы вытащить свойство из лбъекта ,есть 2 спсоба:

// Точечный 
b.key1 

// Квадратные скобочки
b['key1'] 

b.ddd = 'sada' // Добавить к объекту b новое свойство ddd

b.ddd = '123' // Заменить значение свойства

var a = {prop: 1}, b = {prop: 1}, c = {prop: 1};
a = b = c = {prop: 'allTheSame'} // Когда мы присваивыем один объект другому объекту ,то все они ведут на один объект

var y = b;
b.prop 

delete b.prop; // удалить свойство prop


 var obj = {
 	prop: 1, // свойство
 	func: function() { // метод
 		alert( this.prop ); // this указывает на этот объект
 	}
 }

 obj.func();

 // Массивы____________________________________________________________________________


var arr = [1, 2, '4'];

arr[0]; // - 1
arr[6] = 'six'; // Новая запись в массив

arr.length; // Длинна массива ,кол-во индексов

delete arr.[1]; // Удаление элемента массива ,индекс становится undefined (пробел)

arr.splice(1,1); // Первое аргумент указывает с какого индекса мы начинаем удаление ,второй указывает ,сколько удалить
// Элементы сдвигаются. Пробелов нет

arr.length = 2; // Сокращаем массив до 3 индексов

arr.[arr.length] = 'new'; // Заменяет значение последнего элемента массива 

var matrix = [
	[1,2,3],
	[4,5,6],
	[7,8,9]
]// Многомерный массив

matrix[1][1]; // - 5

var newArr = arr.concat(matrix); // Конкатенация массивов

arr.join('') // Преобразует массив в строку. В аргумент передается сепаратор (разделитель)

arr.push('new2') // добавляет новый элемент в конец массива

arr.pop(); // Удаляет последний элемент массива

arr.shift() // Удаляет первый элемент массива

arr.unshidt('new3') // Добавляет новый элемент в начало массива

arr.reverse(); // Представляет все индексы наоборот и возваращает новый массив

arr.slice(1, 2); // С какого и по какой индекс вырезать кусок массива ,создавая новый массив 

arr.sort(); // сортировка массива. Работает неправильно

// Циклы__________________________________________________________________________________

var i;
for ( i = 0 ; i<10 ; i++ ) {
	alert(i);
}

var arr = [1,2,3],
	len = arr.length;

for ( i = 0; i < len; i++ ) {
	alert( arr[i] * 2 );
}


var obj = {
	propOne: 'one',
	propSecond: 'two'
},
prop;

for (prop in obj) { // с помощью for in мы пробегаемся по объекту
	if ( obj.hasOwnProperty(prop) ) { // Проверка принадлежности этого свойства именно объекту без наследования от прототипов
		alert( prop + ':' + obj[prop]); // Выводит все свойства оъекта со значениями через двоеточие
	}
}

// При проходе по объектам нужно всегда делать проверку


// Функции_________________________________________________________________________________


function func (a,b) {
	return a + b;
}

alert( func(1,2) )

// functiom declaration

function name () {//...}

function func1() {
	function funcExample() {
		return 'one'
	}

	return funcExample();

	function funcExample() {
		return 'two';
	}
} // - 'two'



// function expression

var funcExp = function (a, b) {
	return a + b ;	
};

function func1() {
	var  funcExample function() {
		return 'one'
	}

	return funcExample();

	var  funcExample function() {
		return 'two';
	}
}

// Функции обратного вызова

// Используется ,когда функцию нужно выполнить после какого-либо ответа

var func = function(callback) {
	var name = "Nick";
	callback(name);
	return callback(name);
}

func(function(n)) {
	return "Hello " + n;
});

// Возвращение целой функции 

var func1 = function() {
	return function() {
			alert('hello');
	}
}

alert( func1()() );

(function() {
	alert('hello');
})();


var funcArgs = function() {
	var i,
		sum = 0;
		for (i = 0; i < arguments.length; i++) {
			sum += arguments[i];
		};
	alert(sum);
};

funcArgs(1,2,3,4,5);





